// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: EventService_v1.proto

package event_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetDateEventStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "DateEventStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "DateEventStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateEventStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "DateEventStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateEventFinish()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "DateEventFinish",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "DateEventFinish",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateEventFinish()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "DateEventFinish",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MessageEvent

	// no validation rules for IdUser

	if all {
		switch v := interface{}(m.GetTimePreEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "TimePreEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "TimePreEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimePreEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "TimePreEvent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on UpdateEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateEventMultiError, or
// nil if none found.
func (m *UpdateEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTitle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEventValidationError{
					field:  "Title",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEventValidationError{
					field:  "Title",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTitle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEventValidationError{
				field:  "Title",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateEventStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEventValidationError{
					field:  "DateEventStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEventValidationError{
					field:  "DateEventStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateEventStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEventValidationError{
				field:  "DateEventStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateEventFinish()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEventValidationError{
					field:  "DateEventFinish",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEventValidationError{
					field:  "DateEventFinish",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateEventFinish()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEventValidationError{
				field:  "DateEventFinish",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMessageEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEventValidationError{
					field:  "MessageEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEventValidationError{
					field:  "MessageEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessageEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEventValidationError{
				field:  "MessageEvent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdUser

	if all {
		switch v := interface{}(m.GetTimePreEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEventValidationError{
					field:  "TimePreEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEventValidationError{
					field:  "TimePreEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimePreEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEventValidationError{
				field:  "TimePreEvent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEventMultiError(errors)
	}

	return nil
}

// UpdateEventMultiError is an error wrapping multiple validation errors
// returned by UpdateEvent.ValidateAll() if the designated constraints aren't met.
type UpdateEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEventMultiError) AllErrors() []error { return m }

// UpdateEventValidationError is the validation error returned by
// UpdateEvent.Validate if the designated constraints aren't met.
type UpdateEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventValidationError) ErrorName() string { return "UpdateEventValidationError" }

// Error satisfies the builtin error interface
func (e UpdateEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventValidationError{}

// Validate checks the field values on InfoEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InfoEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InfoEventMultiError, or nil
// if none found.
func (m *InfoEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetDateEventStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfoEventValidationError{
					field:  "DateEventStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfoEventValidationError{
					field:  "DateEventStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateEventStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfoEventValidationError{
				field:  "DateEventStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDateEventFinish()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfoEventValidationError{
					field:  "DateEventFinish",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfoEventValidationError{
					field:  "DateEventFinish",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateEventFinish()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfoEventValidationError{
				field:  "DateEventFinish",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MessageEvent

	// no validation rules for IdUser

	if all {
		switch v := interface{}(m.GetTimePreEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfoEventValidationError{
					field:  "TimePreEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfoEventValidationError{
					field:  "TimePreEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimePreEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfoEventValidationError{
				field:  "TimePreEvent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InfoEventMultiError(errors)
	}

	return nil
}

// InfoEventMultiError is an error wrapping multiple validation errors returned
// by InfoEvent.ValidateAll() if the designated constraints aren't met.
type InfoEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoEventMultiError) AllErrors() []error { return m }

// InfoEventValidationError is the validation error returned by
// InfoEvent.Validate if the designated constraints aren't met.
type InfoEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoEventValidationError) ErrorName() string { return "InfoEventValidationError" }

// Error satisfies the builtin error interface
func (e InfoEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoEventValidationError{}

// Validate checks the field values on CreateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventRequestMultiError, or nil if none found.
func (m *CreateEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEventRequestMultiError(errors)
	}

	return nil
}

// CreateEventRequestMultiError is an error wrapping multiple validation errors
// returned by CreateEventRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventRequestMultiError) AllErrors() []error { return m }

// CreateEventRequestValidationError is the validation error returned by
// CreateEventRequest.Validate if the designated constraints aren't met.
type CreateEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventRequestValidationError) ErrorName() string {
	return "CreateEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventRequestValidationError{}

// Validate checks the field values on CreateEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEventResponseMultiError, or nil if none found.
func (m *CreateEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateEventResponseMultiError(errors)
	}

	return nil
}

// CreateEventResponseMultiError is an error wrapping multiple validation
// errors returned by CreateEventResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventResponseMultiError) AllErrors() []error { return m }

// CreateEventResponseValidationError is the validation error returned by
// CreateEventResponse.Validate if the designated constraints aren't met.
type CreateEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventResponseValidationError) ErrorName() string {
	return "CreateEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventResponseValidationError{}

// Validate checks the field values on UpdateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEventRequestMultiError, or nil if none found.
func (m *UpdateEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEventRequestMultiError(errors)
	}

	return nil
}

// UpdateEventRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateEventRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEventRequestMultiError) AllErrors() []error { return m }

// UpdateEventRequestValidationError is the validation error returned by
// UpdateEventRequest.Validate if the designated constraints aren't met.
type UpdateEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventRequestValidationError) ErrorName() string {
	return "UpdateEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventRequestValidationError{}

// Validate checks the field values on DeleteEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEventRequestMultiError, or nil if none found.
func (m *DeleteEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteEventRequestMultiError(errors)
	}

	return nil
}

// DeleteEventRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteEventRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEventRequestMultiError) AllErrors() []error { return m }

// DeleteEventRequestValidationError is the validation error returned by
// DeleteEventRequest.Validate if the designated constraints aren't met.
type DeleteEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEventRequestValidationError) ErrorName() string {
	return "DeleteEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEventRequestValidationError{}

// Validate checks the field values on GetListEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListEventResponseMultiError, or nil if none found.
func (m *GetListEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListEventResponseValidationError{
						field:  fmt.Sprintf("Event[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListEventResponseValidationError{
						field:  fmt.Sprintf("Event[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListEventResponseValidationError{
					field:  fmt.Sprintf("Event[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListEventResponseMultiError(errors)
	}

	return nil
}

// GetListEventResponseMultiError is an error wrapping multiple validation
// errors returned by GetListEventResponse.ValidateAll() if the designated
// constraints aren't met.
type GetListEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListEventResponseMultiError) AllErrors() []error { return m }

// GetListEventResponseValidationError is the validation error returned by
// GetListEventResponse.Validate if the designated constraints aren't met.
type GetListEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListEventResponseValidationError) ErrorName() string {
	return "GetListEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListEventResponseValidationError{}

// Validate checks the field values on GetListWeekEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListWeekEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListWeekEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListWeekEventRequestMultiError, or nil if none found.
func (m *GetListWeekEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListWeekEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDateStartWeek()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetListWeekEventRequestValidationError{
					field:  "DateStartWeek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetListWeekEventRequestValidationError{
					field:  "DateStartWeek",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateStartWeek()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetListWeekEventRequestValidationError{
				field:  "DateStartWeek",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetListWeekEventRequestMultiError(errors)
	}

	return nil
}

// GetListWeekEventRequestMultiError is an error wrapping multiple validation
// errors returned by GetListWeekEventRequest.ValidateAll() if the designated
// constraints aren't met.
type GetListWeekEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListWeekEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListWeekEventRequestMultiError) AllErrors() []error { return m }

// GetListWeekEventRequestValidationError is the validation error returned by
// GetListWeekEventRequest.Validate if the designated constraints aren't met.
type GetListWeekEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListWeekEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListWeekEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListWeekEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListWeekEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListWeekEventRequestValidationError) ErrorName() string {
	return "GetListWeekEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListWeekEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListWeekEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListWeekEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListWeekEventRequestValidationError{}

// Validate checks the field values on GetListWeekEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListWeekEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListWeekEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListWeekEventResponseMultiError, or nil if none found.
func (m *GetListWeekEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListWeekEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListWeekEventResponseValidationError{
						field:  fmt.Sprintf("Event[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListWeekEventResponseValidationError{
						field:  fmt.Sprintf("Event[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListWeekEventResponseValidationError{
					field:  fmt.Sprintf("Event[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListWeekEventResponseMultiError(errors)
	}

	return nil
}

// GetListWeekEventResponseMultiError is an error wrapping multiple validation
// errors returned by GetListWeekEventResponse.ValidateAll() if the designated
// constraints aren't met.
type GetListWeekEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListWeekEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListWeekEventResponseMultiError) AllErrors() []error { return m }

// GetListWeekEventResponseValidationError is the validation error returned by
// GetListWeekEventResponse.Validate if the designated constraints aren't met.
type GetListWeekEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListWeekEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListWeekEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListWeekEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListWeekEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListWeekEventResponseValidationError) ErrorName() string {
	return "GetListWeekEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListWeekEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListWeekEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListWeekEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListWeekEventResponseValidationError{}

// Validate checks the field values on GetListMonthEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListMonthEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListMonthEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListMonthEventRequestMultiError, or nil if none found.
func (m *GetListMonthEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListMonthEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDateStartMonth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetListMonthEventRequestValidationError{
					field:  "DateStartMonth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetListMonthEventRequestValidationError{
					field:  "DateStartMonth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateStartMonth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetListMonthEventRequestValidationError{
				field:  "DateStartMonth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetListMonthEventRequestMultiError(errors)
	}

	return nil
}

// GetListMonthEventRequestMultiError is an error wrapping multiple validation
// errors returned by GetListMonthEventRequest.ValidateAll() if the designated
// constraints aren't met.
type GetListMonthEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListMonthEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListMonthEventRequestMultiError) AllErrors() []error { return m }

// GetListMonthEventRequestValidationError is the validation error returned by
// GetListMonthEventRequest.Validate if the designated constraints aren't met.
type GetListMonthEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListMonthEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListMonthEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListMonthEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListMonthEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListMonthEventRequestValidationError) ErrorName() string {
	return "GetListMonthEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetListMonthEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListMonthEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListMonthEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListMonthEventRequestValidationError{}

// Validate checks the field values on GetListMonthEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListMonthEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListMonthEventResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListMonthEventResponseMultiError, or nil if none found.
func (m *GetListMonthEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListMonthEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListMonthEventResponseValidationError{
						field:  fmt.Sprintf("Event[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListMonthEventResponseValidationError{
						field:  fmt.Sprintf("Event[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListMonthEventResponseValidationError{
					field:  fmt.Sprintf("Event[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListMonthEventResponseMultiError(errors)
	}

	return nil
}

// GetListMonthEventResponseMultiError is an error wrapping multiple validation
// errors returned by GetListMonthEventResponse.ValidateAll() if the
// designated constraints aren't met.
type GetListMonthEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListMonthEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListMonthEventResponseMultiError) AllErrors() []error { return m }

// GetListMonthEventResponseValidationError is the validation error returned by
// GetListMonthEventResponse.Validate if the designated constraints aren't met.
type GetListMonthEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListMonthEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListMonthEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListMonthEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListMonthEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListMonthEventResponseValidationError) ErrorName() string {
	return "GetListMonthEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetListMonthEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListMonthEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListMonthEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListMonthEventResponseValidationError{}
